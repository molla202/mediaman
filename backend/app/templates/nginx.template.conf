user  root;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/info.log info;
#error_log  logs/debug.log debug;
error_log  logs/warn.log warn;

pid  /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    sendfile off;
    default_type application/octet-stream;
 
    keepalive_timeout  65;

    access_log /var/log/nginx/access-streaming.log;
    error_log /var/log/nginx/error-streaming.log;


    #########################################
    # Localhost server
    #########################################
    server {
        listen       8083;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location /auth {
            default_type text/plain;
            content_by_lua_file /home/ubuntu/.config/auth.lua;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }
     }

    ########################################### 
    # HTTPS server
    ###########################################

    server {
        server_name  _;
   

        location = / {
            proxy_pass http://{{BACKEND_HOST}}:{{BACKEND_PORT}}/status;
        }

        location /verifyjwt {
            client_max_body_size 2048M;
            internal;
            proxy_pass http://{{BACKEND_HOST}}:{{BACKEND_PORT}}/verifyjwt;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        location /ws/ {
            proxy_pass http://127.0.0.1:{{WS_PORT}};
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /api {
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://{{BACKEND_HOST}}:{{BACKEND_PORT}};
        }

        location /asset-thumbnails {
            types {
                image/jpeg jpg;
                image/png png;
            }

            location ~ ^/asset-thumbnails/([^/]+)/(.*)$ {
                set $user_id $1;
                set $file_path $2;

                # Dynamic alias based on user directory
                set $user_dir "";
                if ($user_id ~* "^user(\d+)$") {
                    set $user_dir /home/user$1/media-node-data;
                }
                if ($user_id = "main") {
                    set $user_dir /home/ubuntu/media-node-data;
                }

                alias $user_dir/$file_path;
            }
        }

        location /ipfs-api {
            client_max_body_size 100M;

            auth_request /verifyjwt;
            auth_request_set $auth_status $upstream_status;
            
            proxy_pass http://0.0.0.0:5001;
        }

        location /ipfs {
            proxy_pass http://0.0.0.0:8080;
        }

        location /upload-thumbnail {
            client_max_body_size 10M;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';


            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Headers' '*';
                return 204;
            }

            auth_request /verifyjwt;
            auth_request_set $auth_status $upstream_status;
            
            proxy_pass http://{{RUNNER_HOST}}:{{RUNNER_PORT}}$uri$is_args$args;
        }

        location ~ ^/runner/users/(.*)/assets/file-upload$ {
            client_max_body_size 2048M;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';


            if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain charset=UTF-8';
               add_header 'Content-Length' 0;
               add_header 'Access-Control-Allow-Headers' '*';
               return 204;
            }
            
            auth_request /verifyjwt;
            auth_request_set $auth_status $upstream_status;

            proxy_pass http://{{RUNNER_HOST}}:{{RUNNER_PORT}}$uri$is_args$args;
        }

        location ~ ^/runner/users/(.*)/add-default-stream$ {
            client_max_body_size 2048M;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';


            if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain charset=UTF-8';
               add_header 'Content-Length' 0;
               add_header 'Access-Control-Allow-Headers' '*';
               return 204;
            }
            
            auth_request /verifyjwt;
            auth_request_set $auth_status $upstream_status;

            proxy_pass http://{{RUNNER_HOST}}:{{RUNNER_PORT}}$uri$is_args$args;
        }

        location ~ ^/runner/users/(.*)/get-default-stream$ {
            client_max_body_size 2048M;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';


            if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain charset=UTF-8';
               add_header 'Content-Length' 0;
               add_header 'Access-Control-Allow-Headers' '*';
               return 204;
            }
            
            auth_request /verifyjwt;
            auth_request_set $auth_status $upstream_status;

            proxy_pass http://{{RUNNER_HOST}}:{{RUNNER_PORT}}$uri$is_args$args;
        }

        location ~ ^/runner/users/(.*)/assets/(.*)/(file-upload|download)$ {
            client_max_body_size 2048M;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';


            if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Max-Age' 1728000;
               add_header 'Content-Type' 'text/plain charset=UTF-8';
               add_header 'Content-Length' 0;
               add_header 'Access-Control-Allow-Headers' '*';
               return 204;
            }
            
            auth_request /verifyjwt;
            auth_request_set $auth_status $upstream_status;

            proxy_pass http://{{RUNNER_HOST}}:{{RUNNER_PORT}}$uri$is_args$args;
        }

        location /playback {
            add_header Cache-Control no-cache;

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Headers' '*';
                return 204;
            }

            # Serve HLS fragment
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/mp4 mp4;
            }

            alias /mnt/livestream-recordings;
        }

        location /play {
            add_header Cache-Control no-cache;

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Headers' '*';
                return 204;
            }

            # Serve HLS fragment
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/mp4 mp4;
            }

            # Extract userID from URL path
            location ~ ^/play/([^/]+)/(.*)$ {
                set $user_id $1;
                set $file_path $2;

                # Dynamic alias based on user directory
                set $user_dir "";
                if ($user_id ~* "^user(\d+)$") {
                    set $user_dir /home/user$1/media-node-data;
                }
                if ($user_id = "main") {
                    set $user_dir /home/ubuntu/media-node-data;
                }

                alias $user_dir/$file_path;
            }
        }

        location /live/ {
            add_header Cache-Control no-cache;

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Headers' '*';
                return 204;
            }

            # Serve HLS fragment
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/mp4 mp4;
            }

            alias /mnt/live/;
        }

        location /stream {
            rewrite  /([a-zA-Z0-9_\-]*)/([a-zA-Z0-9_\-]*)/([0-9]*)/(.*)\.(ts|m3u8|mp4)$ /hls/live/$4.$5?token=$2&expires=$3;
            root /mnt/not-exist;
        }
  
        location /hls/live {
            internal;

            add_header Cache-Control no-cache;

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Headers' '*';
                return 204;
            }
            secure_link $arg_token,$arg_expires;
            secure_link_md5 "$secure_link_expires $remote_addr {{TOKEN_SECRET}}";
            if ($secure_link = "") { 
                return 403; 
            }
            if ($secure_link = "0") { 
                return 410; 
            }

            # Serve HLS fragment
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/mp4 mp4;
            }

            alias /mnt/live;
        }

        location /hls {
          # Disable cache
          add_header Cache-Control no-cache;

          add_header 'Access-Control-Allow-Origin' "*" always;
          add_header 'Access-Control-Expose-Headers' 'Content-Length';
          add_header 'Access-Control-Allow-Methods' '*';
          add_header 'Access-Control-Allow-Headers' '*';
          
          # allow CORS preflight requests
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain charset=UTF-8';
              add_header 'Content-Length' 0;
              add_header 'Access-Control-Allow-Headers' '*';
              return 204;
          }

          types {
              application/vnd.apple.mpegurl m3u8;
              video/mp2t ts;
              video/mp4 mp4;
              audio/x-wav wav;
              audio/mpeg mp3;
              image/jped jpg;
              image/png png;
          }

          alias {{ROOT_DIR}};
        }

        location /video {
            rewrite  /([a-zA-Z0-9_\-]*)/([a-zA-Z0-9_\-]*)/([0-9]*)/(.*)/(.*)\.(ts|m3u8|mp4)$ /vod/assets/$1/segments/$5.$6?token=$2&expires=$3&device_id=$4;
            root /mnt/not-exist;
        }

        location /vod {
            internal;
          
            #if ($http_origin !~ '^https?://(localhost|dev\.freeflix\.studio|www\.freeflix\.studio|nucleus\.freeflix\.live)') { return 403; }

            # CORS setup
            add_header Cache-Control no-cache;

            add_header 'Access-Control-Allow-Origin' "*" always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';
          

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Headers' '*';
                return 204;
            }


            secure_link $arg_token,$arg_expires;
            secure_link_md5 "$secure_link_expires $arg_device_id {{TOKEN_SECRET}}";
            if ($secure_link = "") { 
                return 403; 
            }
            if ($secure_link = "0") { 
                return 410; 
            }

            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/mp4 mp4;
            }
            alias {{ROOT_DIR}};
        }

    }
         
    #include /etc/nginx/sites-enabled/*;
}

rtmp_auto_push on;
rtmp_auto_push_reconnect 1s;

rtmp {
    server {
        listen 1935;
        chunk_size 8196;
        timeout 30s;

        include {{RTMP_PATH}}/*.conf;
    }
}
