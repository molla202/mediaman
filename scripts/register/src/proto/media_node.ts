// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: media_node.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "./cosmos/base/v1beta1/coin";

export const protobufPackage = "OmniFlix.medianode.v1beta1";

export interface MsgRegisterMediaNode {
  id: string;
  url: string;
  hardwareSpecs: MsgRegisterMediaNode_HardwareSpecs | undefined;
  info: MsgRegisterMediaNode_Info | undefined;
  pricePerHour: Coin | undefined;
  deposit: Coin | undefined;
  sender: string;
}

export interface MsgRegisterMediaNode_HardwareSpecs {
  cpus: number;
  ramInGb: number;
  storageInGb: number;
}

export interface MsgRegisterMediaNode_Info {
  moniker: string;
  description: string;
  contact: string;
}

export interface MsgLeaseMediaNode {
  mediaNodeId: string;
  leaseHours: number;
  amount: Coin | undefined;
  sender: string;
}

export interface MsgLeaseMediaNodeResponse {
}

export interface MsgDepositMediaNode {
  id: string;
  amount: Coin | undefined;
  sender: string;
}

export interface MsgCancelLease {
  mediaNodeId: string;
  sender: string;
}

export interface MsgExtendLease {
  mediaNodeId: string;
  leaseHours: number;
  amount: Coin | undefined;
  sender: string;
}

export interface MsgExtendLeaseResponse {
}

export interface MsgCancelLeaseResponse {
}

export interface MsgDepositMediaNodeResponse {
}

export interface MsgRegisterMediaNodeResponse {
}

function createBaseMsgRegisterMediaNode(): MsgRegisterMediaNode {
  return {
    id: "",
    url: "",
    hardwareSpecs: undefined,
    info: undefined,
    pricePerHour: undefined,
    deposit: undefined,
    sender: "",
  };
}

export const MsgRegisterMediaNode: MessageFns<MsgRegisterMediaNode> = {
  encode(message: MsgRegisterMediaNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.hardwareSpecs !== undefined) {
      MsgRegisterMediaNode_HardwareSpecs.encode(message.hardwareSpecs, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      MsgRegisterMediaNode_Info.encode(message.info, writer.uint32(58).fork()).join();
    }
    if (message.pricePerHour !== undefined) {
      Coin.encode(message.pricePerHour, writer.uint32(34).fork()).join();
    }
    if (message.deposit !== undefined) {
      Coin.encode(message.deposit, writer.uint32(42).fork()).join();
    }
    if (message.sender !== "") {
      writer.uint32(50).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterMediaNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterMediaNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hardwareSpecs = MsgRegisterMediaNode_HardwareSpecs.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.info = MsgRegisterMediaNode_Info.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pricePerHour = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deposit = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterMediaNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      hardwareSpecs: isSet(object.hardwareSpecs)
        ? MsgRegisterMediaNode_HardwareSpecs.fromJSON(object.hardwareSpecs)
        : undefined,
      info: isSet(object.info) ? MsgRegisterMediaNode_Info.fromJSON(object.info) : undefined,
      pricePerHour: isSet(object.pricePerHour) ? Coin.fromJSON(object.pricePerHour) : undefined,
      deposit: isSet(object.deposit) ? Coin.fromJSON(object.deposit) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgRegisterMediaNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.hardwareSpecs !== undefined) {
      obj.hardwareSpecs = MsgRegisterMediaNode_HardwareSpecs.toJSON(message.hardwareSpecs);
    }
    if (message.info !== undefined) {
      obj.info = MsgRegisterMediaNode_Info.toJSON(message.info);
    }
    if (message.pricePerHour !== undefined) {
      obj.pricePerHour = Coin.toJSON(message.pricePerHour);
    }
    if (message.deposit !== undefined) {
      obj.deposit = Coin.toJSON(message.deposit);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterMediaNode>, I>>(base?: I): MsgRegisterMediaNode {
    return MsgRegisterMediaNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterMediaNode>, I>>(object: I): MsgRegisterMediaNode {
    const message = createBaseMsgRegisterMediaNode();
    message.id = object.id ?? "";
    message.url = object.url ?? "";
    message.hardwareSpecs = (object.hardwareSpecs !== undefined && object.hardwareSpecs !== null)
      ? MsgRegisterMediaNode_HardwareSpecs.fromPartial(object.hardwareSpecs)
      : undefined;
    message.info = (object.info !== undefined && object.info !== null)
      ? MsgRegisterMediaNode_Info.fromPartial(object.info)
      : undefined;
    message.pricePerHour = (object.pricePerHour !== undefined && object.pricePerHour !== null)
      ? Coin.fromPartial(object.pricePerHour)
      : undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Coin.fromPartial(object.deposit)
      : undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgRegisterMediaNode_HardwareSpecs(): MsgRegisterMediaNode_HardwareSpecs {
  return { cpus: 0, ramInGb: 0, storageInGb: 0 };
}

export const MsgRegisterMediaNode_HardwareSpecs: MessageFns<MsgRegisterMediaNode_HardwareSpecs> = {
  encode(message: MsgRegisterMediaNode_HardwareSpecs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpus !== 0) {
      writer.uint32(8).int64(message.cpus);
    }
    if (message.ramInGb !== 0) {
      writer.uint32(16).int64(message.ramInGb);
    }
    if (message.storageInGb !== 0) {
      writer.uint32(24).int64(message.storageInGb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterMediaNode_HardwareSpecs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterMediaNode_HardwareSpecs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.cpus = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ramInGb = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.storageInGb = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterMediaNode_HardwareSpecs {
    return {
      cpus: isSet(object.cpus) ? globalThis.Number(object.cpus) : 0,
      ramInGb: isSet(object.ramInGb) ? globalThis.Number(object.ramInGb) : 0,
      storageInGb: isSet(object.storageInGb) ? globalThis.Number(object.storageInGb) : 0,
    };
  },

  toJSON(message: MsgRegisterMediaNode_HardwareSpecs): unknown {
    const obj: any = {};
    if (message.cpus !== 0) {
      obj.cpus = Math.round(message.cpus);
    }
    if (message.ramInGb !== 0) {
      obj.ramInGb = Math.round(message.ramInGb);
    }
    if (message.storageInGb !== 0) {
      obj.storageInGb = Math.round(message.storageInGb);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterMediaNode_HardwareSpecs>, I>>(
    base?: I,
  ): MsgRegisterMediaNode_HardwareSpecs {
    return MsgRegisterMediaNode_HardwareSpecs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterMediaNode_HardwareSpecs>, I>>(
    object: I,
  ): MsgRegisterMediaNode_HardwareSpecs {
    const message = createBaseMsgRegisterMediaNode_HardwareSpecs();
    message.cpus = object.cpus ?? 0;
    message.ramInGb = object.ramInGb ?? 0;
    message.storageInGb = object.storageInGb ?? 0;
    return message;
  },
};

function createBaseMsgRegisterMediaNode_Info(): MsgRegisterMediaNode_Info {
  return { moniker: "", description: "", contact: "" };
}

export const MsgRegisterMediaNode_Info: MessageFns<MsgRegisterMediaNode_Info> = {
  encode(message: MsgRegisterMediaNode_Info, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moniker !== "") {
      writer.uint32(10).string(message.moniker);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.contact !== "") {
      writer.uint32(26).string(message.contact);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterMediaNode_Info {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterMediaNode_Info();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.moniker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contact = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterMediaNode_Info {
    return {
      moniker: isSet(object.moniker) ? globalThis.String(object.moniker) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      contact: isSet(object.contact) ? globalThis.String(object.contact) : "",
    };
  },

  toJSON(message: MsgRegisterMediaNode_Info): unknown {
    const obj: any = {};
    if (message.moniker !== "") {
      obj.moniker = message.moniker;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.contact !== "") {
      obj.contact = message.contact;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterMediaNode_Info>, I>>(base?: I): MsgRegisterMediaNode_Info {
    return MsgRegisterMediaNode_Info.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterMediaNode_Info>, I>>(object: I): MsgRegisterMediaNode_Info {
    const message = createBaseMsgRegisterMediaNode_Info();
    message.moniker = object.moniker ?? "";
    message.description = object.description ?? "";
    message.contact = object.contact ?? "";
    return message;
  },
};

function createBaseMsgLeaseMediaNode(): MsgLeaseMediaNode {
  return { mediaNodeId: "", leaseHours: 0, amount: undefined, sender: "" };
}

export const MsgLeaseMediaNode: MessageFns<MsgLeaseMediaNode> = {
  encode(message: MsgLeaseMediaNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaNodeId !== "") {
      writer.uint32(10).string(message.mediaNodeId);
    }
    if (message.leaseHours !== 0) {
      writer.uint32(16).uint64(message.leaseHours);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeaseMediaNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeaseMediaNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mediaNodeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leaseHours = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLeaseMediaNode {
    return {
      mediaNodeId: isSet(object.mediaNodeId) ? globalThis.String(object.mediaNodeId) : "",
      leaseHours: isSet(object.leaseHours) ? globalThis.Number(object.leaseHours) : 0,
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgLeaseMediaNode): unknown {
    const obj: any = {};
    if (message.mediaNodeId !== "") {
      obj.mediaNodeId = message.mediaNodeId;
    }
    if (message.leaseHours !== 0) {
      obj.leaseHours = Math.round(message.leaseHours);
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLeaseMediaNode>, I>>(base?: I): MsgLeaseMediaNode {
    return MsgLeaseMediaNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLeaseMediaNode>, I>>(object: I): MsgLeaseMediaNode {
    const message = createBaseMsgLeaseMediaNode();
    message.mediaNodeId = object.mediaNodeId ?? "";
    message.leaseHours = object.leaseHours ?? 0;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgLeaseMediaNodeResponse(): MsgLeaseMediaNodeResponse {
  return {};
}

export const MsgLeaseMediaNodeResponse: MessageFns<MsgLeaseMediaNodeResponse> = {
  encode(_: MsgLeaseMediaNodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeaseMediaNodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeaseMediaNodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLeaseMediaNodeResponse {
    return {};
  },

  toJSON(_: MsgLeaseMediaNodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgLeaseMediaNodeResponse>, I>>(base?: I): MsgLeaseMediaNodeResponse {
    return MsgLeaseMediaNodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgLeaseMediaNodeResponse>, I>>(_: I): MsgLeaseMediaNodeResponse {
    const message = createBaseMsgLeaseMediaNodeResponse();
    return message;
  },
};

function createBaseMsgDepositMediaNode(): MsgDepositMediaNode {
  return { id: "", amount: undefined, sender: "" };
}

export const MsgDepositMediaNode: MessageFns<MsgDepositMediaNode> = {
  encode(message: MsgDepositMediaNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDepositMediaNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDepositMediaNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDepositMediaNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgDepositMediaNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDepositMediaNode>, I>>(base?: I): MsgDepositMediaNode {
    return MsgDepositMediaNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDepositMediaNode>, I>>(object: I): MsgDepositMediaNode {
    const message = createBaseMsgDepositMediaNode();
    message.id = object.id ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgCancelLease(): MsgCancelLease {
  return { mediaNodeId: "", sender: "" };
}

export const MsgCancelLease: MessageFns<MsgCancelLease> = {
  encode(message: MsgCancelLease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaNodeId !== "") {
      writer.uint32(10).string(message.mediaNodeId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCancelLease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mediaNodeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCancelLease {
    return {
      mediaNodeId: isSet(object.mediaNodeId) ? globalThis.String(object.mediaNodeId) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgCancelLease): unknown {
    const obj: any = {};
    if (message.mediaNodeId !== "") {
      obj.mediaNodeId = message.mediaNodeId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelLease>, I>>(base?: I): MsgCancelLease {
    return MsgCancelLease.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelLease>, I>>(object: I): MsgCancelLease {
    const message = createBaseMsgCancelLease();
    message.mediaNodeId = object.mediaNodeId ?? "";
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgExtendLease(): MsgExtendLease {
  return { mediaNodeId: "", leaseHours: 0, amount: undefined, sender: "" };
}

export const MsgExtendLease: MessageFns<MsgExtendLease> = {
  encode(message: MsgExtendLease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaNodeId !== "") {
      writer.uint32(10).string(message.mediaNodeId);
    }
    if (message.leaseHours !== 0) {
      writer.uint32(16).uint64(message.leaseHours);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExtendLease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExtendLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mediaNodeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leaseHours = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgExtendLease {
    return {
      mediaNodeId: isSet(object.mediaNodeId) ? globalThis.String(object.mediaNodeId) : "",
      leaseHours: isSet(object.leaseHours) ? globalThis.Number(object.leaseHours) : 0,
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
    };
  },

  toJSON(message: MsgExtendLease): unknown {
    const obj: any = {};
    if (message.mediaNodeId !== "") {
      obj.mediaNodeId = message.mediaNodeId;
    }
    if (message.leaseHours !== 0) {
      obj.leaseHours = Math.round(message.leaseHours);
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgExtendLease>, I>>(base?: I): MsgExtendLease {
    return MsgExtendLease.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgExtendLease>, I>>(object: I): MsgExtendLease {
    const message = createBaseMsgExtendLease();
    message.mediaNodeId = object.mediaNodeId ?? "";
    message.leaseHours = object.leaseHours ?? 0;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.sender = object.sender ?? "";
    return message;
  },
};

function createBaseMsgExtendLeaseResponse(): MsgExtendLeaseResponse {
  return {};
}

export const MsgExtendLeaseResponse: MessageFns<MsgExtendLeaseResponse> = {
  encode(_: MsgExtendLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExtendLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExtendLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgExtendLeaseResponse {
    return {};
  },

  toJSON(_: MsgExtendLeaseResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgExtendLeaseResponse>, I>>(base?: I): MsgExtendLeaseResponse {
    return MsgExtendLeaseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgExtendLeaseResponse>, I>>(_: I): MsgExtendLeaseResponse {
    const message = createBaseMsgExtendLeaseResponse();
    return message;
  },
};

function createBaseMsgCancelLeaseResponse(): MsgCancelLeaseResponse {
  return {};
}

export const MsgCancelLeaseResponse: MessageFns<MsgCancelLeaseResponse> = {
  encode(_: MsgCancelLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCancelLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCancelLeaseResponse {
    return {};
  },

  toJSON(_: MsgCancelLeaseResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCancelLeaseResponse>, I>>(base?: I): MsgCancelLeaseResponse {
    return MsgCancelLeaseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCancelLeaseResponse>, I>>(_: I): MsgCancelLeaseResponse {
    const message = createBaseMsgCancelLeaseResponse();
    return message;
  },
};

function createBaseMsgDepositMediaNodeResponse(): MsgDepositMediaNodeResponse {
  return {};
}

export const MsgDepositMediaNodeResponse: MessageFns<MsgDepositMediaNodeResponse> = {
  encode(_: MsgDepositMediaNodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDepositMediaNodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDepositMediaNodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDepositMediaNodeResponse {
    return {};
  },

  toJSON(_: MsgDepositMediaNodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDepositMediaNodeResponse>, I>>(base?: I): MsgDepositMediaNodeResponse {
    return MsgDepositMediaNodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDepositMediaNodeResponse>, I>>(_: I): MsgDepositMediaNodeResponse {
    const message = createBaseMsgDepositMediaNodeResponse();
    return message;
  },
};

function createBaseMsgRegisterMediaNodeResponse(): MsgRegisterMediaNodeResponse {
  return {};
}

export const MsgRegisterMediaNodeResponse: MessageFns<MsgRegisterMediaNodeResponse> = {
  encode(_: MsgRegisterMediaNodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterMediaNodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterMediaNodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterMediaNodeResponse {
    return {};
  },

  toJSON(_: MsgRegisterMediaNodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterMediaNodeResponse>, I>>(base?: I): MsgRegisterMediaNodeResponse {
    return MsgRegisterMediaNodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterMediaNodeResponse>, I>>(_: I): MsgRegisterMediaNodeResponse {
    const message = createBaseMsgRegisterMediaNodeResponse();
    return message;
  },
};

export interface Msg {
  RegisterMediaNode(request: MsgRegisterMediaNode): Promise<MsgRegisterMediaNodeResponse>;
  DepositMediaNode(request: MsgDepositMediaNode): Promise<MsgDepositMediaNodeResponse>;
}

export const MsgServiceName = "OmniFlix.medianode.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.RegisterMediaNode = this.RegisterMediaNode.bind(this);
    this.DepositMediaNode = this.DepositMediaNode.bind(this);
  }
  RegisterMediaNode(request: MsgRegisterMediaNode): Promise<MsgRegisterMediaNodeResponse> {
    const data = MsgRegisterMediaNode.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterMediaNode", data);
    return promise.then((data) => MsgRegisterMediaNodeResponse.decode(new BinaryReader(data)));
  }

  DepositMediaNode(request: MsgDepositMediaNode): Promise<MsgDepositMediaNodeResponse> {
    const data = MsgDepositMediaNode.encode(request).finish();
    const promise = this.rpc.request(this.service, "DepositMediaNode", data);
    return promise.then((data) => MsgDepositMediaNodeResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
